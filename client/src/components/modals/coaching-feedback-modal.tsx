import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { User, MessageSquare, TrendingUp, CheckCircle, Download } from "lucide-react";
// @ts-ignore
import jsPDF from 'jspdf';
import { apiRequest } from "@/lib/queryClient";

interface CoachingFeedbackModalProps {
  isOpen: boolean;
  onClose: () => void;
  employee: {
    id: string;
    name: string;
    role: string;
    score: number;
    pipId?: string;
  };
  feedback: string;
}

export default function CoachingFeedbackModal({ 
  isOpen, 
  onClose, 
  employee, 
  feedback 
}: CoachingFeedbackModalProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);
  const [progress, setProgress] = useState(0);

  const generateCoachingPDF = async () => {
    try {
      await apiRequest('POST', '/api/generate-coaching', {
        employeeId: employee.id,
        score: employee.score,
        pipId: employee.pipId || null,
      });
    } catch (error) {
      console.error('Failed to generate coaching PDF:', error);
    }
  };

  const downloadCoachingPDF = () => {
    try {
      const doc = new jsPDF();
      const currentDate = new Date().toLocaleDateString();
      
      // Set title
      doc.setFontSize(16);
      doc.text('COACHING SESSION REPORT', 20, 20);
      
      // Employee info
      doc.setFontSize(12);
      doc.text(`Employee: ${employee.name}`, 20, 40);
      doc.text(`Position: ${employee.role}`, 20, 50);
      doc.text(`Date: ${currentDate}`, 20, 60);
      doc.text(`Performance Score: ${employee.score}%`, 20, 70);
      
      if (employee.pipId) {
        doc.text(`PIP Session ID: ${employee.pipId}`, 20, 80);
        doc.text(`Session Type: PIP Coaching`, 20, 90);
      } else {
        doc.text(`Session Type: Performance Coaching`, 20, 80);
      }
      
      // Feedback content
      doc.setFontSize(11);
      doc.text('Coaching Feedback:', 20, 110);
      const lines = doc.splitTextToSize(feedback, 170);
      doc.text(lines, 20, 120);
      
      // Footer
      doc.setFontSize(8);
      doc.text(`Generated by AI Coaching System on ${currentDate}`, 20, 280);
      
      // Download the PDF
      const fileName = `Coaching_Report_${employee.name.replace(/\s+/g, '_')}_${currentDate.replace(/\//g, '-')}.pdf`;
      doc.save(fileName);
      
      console.log('Coaching PDF generated successfully');
    } catch (error) {
      console.error('PDF generation failed:', error);
    }
  };

  const steps = [
    "Analyzing performance data...",
    "Generating personalized coaching...", 
    "Delivering feedback to employee...",
    "Coaching session complete!"
  ];

  useEffect(() => {
    if (isOpen) {
      setCurrentStep(0);
      setShowFeedback(false);
      setProgress(0);
      
      const timer = setInterval(() => {
        setCurrentStep(prev => {
          if (prev < steps.length - 1) {
            const newStep = prev + 1;
            setProgress((newStep / steps.length) * 100);
            if (newStep === steps.length - 1) {
              setTimeout(async () => {
                setShowFeedback(true);
                setProgress(100);
                // Generate PDF after completion
                await generateCoachingPDF();
              }, 500);
            }
            return newStep;
          }
          setProgress(100);
          clearInterval(timer);
          return prev;
        });
      }, 1500);

      return () => clearInterval(timer);
    }
  }, [isOpen]);

  const getScoreBadge = (score: number) => {
    if (score >= 80) return <Badge className="bg-accent/10 text-accent">Performing Well</Badge>;
    if (score >= 70) return <Badge className="bg-chart-3/10 text-chart-3">At Risk</Badge>;
    return <Badge variant="destructive">Needs Attention</Badge>;
  };

  const getCoachingIcon = (score: number) => {
    if (score >= 80) return <TrendingUp className="w-5 h-5 text-accent" />;
    if (score >= 70) return <MessageSquare className="w-5 h-5 text-chart-3" />;
    return <MessageSquare className="w-5 h-5 text-destructive" />;
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <MessageSquare className="w-5 h-5" />
            <span>Automated Coaching System</span>
          </DialogTitle>
          <DialogDescription>
            Generate automated coaching feedback and improvement recommendations for selected employees based on their performance metrics.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Employee Info */}
          <div className="flex items-center space-x-4 p-4 bg-muted/50 rounded-lg">
            <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
              <User className="w-6 h-6 text-primary" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold">{employee.name}</h3>
              <p className="text-sm text-muted-foreground">{employee.role}</p>
            </div>
            <div className="text-right">
              <div className="text-lg font-bold">{employee.score}%</div>
              {getScoreBadge(employee.score)}
            </div>
          </div>

          {/* Progress Section */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Processing Status</span>
              <span className="text-sm text-muted-foreground">{progress}% complete</span>
            </div>
            <Progress value={progress} className="h-2" />
            
            <div className="space-y-2">
              {steps.map((step, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <div className={`w-4 h-4 rounded-full flex items-center justify-center ${
                    index <= currentStep 
                      ? 'bg-primary text-primary-foreground' 
                      : 'bg-muted text-muted-foreground'
                  }`}>
                    {index < currentStep ? (
                      <CheckCircle className="w-3 h-3" />
                    ) : (
                      <span className="text-xs">{index + 1}</span>
                    )}
                  </div>
                  <span className={`text-sm ${
                    index <= currentStep ? 'text-foreground' : 'text-muted-foreground'
                  }`}>
                    {step}
                  </span>
                  {index === currentStep && currentStep < steps.length - 1 && (
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" />
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Feedback Section */}
          {showFeedback && (
            <div className="space-y-4 animate-in fade-in-50 slide-in-from-bottom-5 duration-500">
              <div className="border-t pt-4">
                <div className="flex items-center space-x-2 mb-3">
                  {getCoachingIcon(employee.score)}
                  <h4 className="font-semibold">Coaching Feedback Generated</h4>
                </div>
                <div className="bg-accent/5 border border-accent/20 rounded-lg p-4 max-h-96 overflow-y-auto">
                  <div 
                    className="text-sm leading-relaxed whitespace-pre-line font-mono"
                    dangerouslySetInnerHTML={{
                      __html: feedback
                        .replace(/\n\n/g, '<br><br>')
                        .replace(/\n/g, '<br>')
                        .replace(/COACHING & DEVELOPMENT COMMUNICATION/g, '<strong>COACHING & DEVELOPMENT COMMUNICATION</strong>')
                        .replace(/PERFORMANCE OVERVIEW:/g, '<strong>PERFORMANCE OVERVIEW:</strong>')
                        .replace(/AREAS OF STRENGTH:/g, '<strong>AREAS OF STRENGTH:</strong>')
                        .replace(/FOCUS AREAS FOR IMPROVEMENT:/g, '<strong>FOCUS AREAS FOR IMPROVEMENT:</strong>')
                        .replace(/SPECIFIC RECOMMENDATIONS:/g, '<strong>SPECIFIC RECOMMENDATIONS:</strong>')
                        .replace(/NEXT STEPS:/g, '<strong>NEXT STEPS:</strong>')
                        .replace(/RECOGNITION & DEVELOPMENT COMMUNICATION/g, '<strong>RECOGNITION & DEVELOPMENT COMMUNICATION</strong>')
                        .replace(/PERFORMANCE RECOGNITION:/g, '<strong>PERFORMANCE RECOGNITION:</strong>')
                        .replace(/EXCEPTIONAL STRENGTHS:/g, '<strong>EXCEPTIONAL STRENGTHS:</strong>')
                        .replace(/LEADERSHIP & MENTORING OPPORTUNITIES:/g, '<strong>LEADERSHIP & MENTORING OPPORTUNITIES:</strong>')
                        .replace(/EXCELLENCE CONTINUATION PLAN:/g, '<strong>EXCELLENCE CONTINUATION PLAN:</strong>')
                        .replace(/‚≠ê/g, '<span style="color: #fbbf24;">‚≠ê</span>')
                        .replace(/‚ñ°/g, '<span style="color: #6366f1;">‚ñ°</span>')
                        .replace(/‚Ä¢/g, '<span style="color: #06b6d4;">‚Ä¢</span>')
                    }}
                  />
                </div>
              </div>
              
              <div className="text-xs text-muted-foreground bg-muted/30 p-3 rounded">
                üí° This feedback has been automatically generated based on the employee's performance score of {employee.score}% and will be added to their coaching history for future reference.
              </div>
              
              <div className="flex justify-center mt-4">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => downloadCoachingPDF()}
                  className="flex items-center space-x-2"
                >
                  <Download className="w-4 h-4" />
                  <span>Download Coaching PDF</span>
                </Button>
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex justify-end space-x-2 pt-4 border-t">
            {currentStep === steps.length - 1 && (
              <Button onClick={onClose} data-testid="button-close-coaching">
                Close
              </Button>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
